<?php

/**
 * @file
 * Functions to support theming in the pledge_theme theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function pledge_theme_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function pledge_theme_page_attachments_alter(array &$page) {
//  $page['#attached']['library'][] = 'pledge_theme/bootstrap';
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function pledge_theme_preprocess_page(array &$variables) {

  if ($variables['is_front']) {
    $query = \Drupal::database()->select('node__field_pledge_countries', 'c');
    $query->addField('nu', 'field_pledge_nuts_id_value');
    $query->join('taxonomy_term_data', 't', 't.tid = c.field_pledge_countries_target_id');
    $query->join('taxonomy_term__field_pledge_nuts_id', 'nu', 'nu.entity_id = t.tid');
    $query->join('node_field_data', 'n', 'c.entity_id = n.nid');
    $query->condition('n.status', 1);
    $country_codes = $query->execute();

    if ($country_codes) {
      $codes = [];
      $sum = 0;
      foreach ($country_codes as $country_code) {
        $codes[$country_code->field_pledge_nuts_id_value]['value'] = isset($codes[$country_code->field_pledge_nuts_id_value]['value']) ? $codes[$country_code->field_pledge_nuts_id_value]['value'] + 1 : 1;

        $sum += 1;
      }

      $variables['#attached']['drupalSettings']['pledge']['pledge_countries'] = $codes;
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function pledge_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function pledge_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function pledge_theme_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function pledge_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function pledge_theme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function pledge_theme_preprocess_node(array &$variables) {
  $node = $variables['node'];
  if ($node->getType() == 'pledge') {
    if (!empty($node->field_pledge_updates[0]->entity->field_pledge_status[0])) {
      $pledge_status = $node->field_pledge_updates[0]->entity->field_pledge_status[0]->entity;
      $variables['#attached']['drupalSettings']['pledge']['pledge_percent'] = $pledge_status->field_pledge_percentage->value;
      $variables['#attached']['drupalSettings']['pledge']['pledge_status'] = $pledge_status->getName();
      $variables['#attached']['drupalSettings']['pledge']['pledge_color'] = $pledge_status->field_pledge_color->value;
    }

    $countries = [];
    foreach ($node->field_pledge_countries as $country) {
      if (!empty($country->entity->field_pledge_nuts_id->value)) {
        $countries[] = $country->entity->field_pledge_nuts_id->value;
      }
    }

    $variables['#attached']['drupalSettings']['pledge']['pledge_countries'] = $countries;
    $variables['#attached']['library'][] = 'pledge_theme/pledge_page';
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function pledge_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function pledge_theme_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function pledge_theme_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function pledge_theme_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function pledge_theme_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function pledge_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function pledge_theme_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function pledge_theme_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $view = $form_state->getStorage('view');
  if ($view['view']->id() == 'pledges') {
    $input = $form_state->getUserInput();
    if (
        !empty($input['combine']) ||
        $input['field_pledge_countries_target_id'] != 'All' ||
        $input['field_pledge_ds_for_all_citizens_value'] != 'All' ||
        $input['field_pledge_ds_ict_professional_value'] != 'All' ||
        $input['field_pledge_ds_for_labour_value'] != 'All' ||
        $input['field_pledge_ds_in_education_value'] != 'All'
    ) {
      $class = 'up';
    }
    else {
      $class = 'down';
      $form['#attributes']['class'][] = 'sr-only';
    }

    //  exit('pledge_theme_form_views_exposed_form_pledges_page_alter');
    // Alter the submit button to something more friendly.
    $form['#prefix'] = '<div class="row intro-list-pledges">
        <div class="col-lg-9">
            Here you can check the progress of the pledges in the context of 
            the <a target="_blank" href="https://ec.europa.eu/digital-single-market/en/digital-skills-jobs-coalition">Digital Skills and Jobs Coalition</a>
            as reported by the pledges themselves. 
            For more information, see the <a href="/about">about</a> page. 
            For additional information, please use the <a href="/contact">contact page</a>.
        </div>
        </div>
        <div class="filters row"><div class="col-lg-9"><h3 class="trigger-filters">Filters <i class="fa fa-caret-' . $class . '" aria-hidden="true"></i></h3>';
    $form['#suffix'] = '</div></div>';

  }
//  $fields = [
//    'combine',
////    'field_pledge_countries_target_id',
//    'field_pledge_ds_for_all_citizens_value',
//    'field_pledge_ds_ict_professional_value',
//    'field_pledge_ds_for_labour_value',
//    'field_pledge_ds_in_education_value',
//    'actions',
//  ];
//
//  foreach ($fields as $field) {
//    $form['subform'][$field] = $form[$field];
//    unset($form[$field]);
//  }

}
